<launch>

  <arg name="base"      value="$(optenv CLEANROBOT_BASE cleanrobot_base)"/> 
  <arg name="stacks"    value="$(optenv CLEANROBOT_STACKS nostack)"/>  <!-- circles --> 
  <arg name="3d_sensor" value="$(optenv CLEANROBOT_3D_SENSOR rplidar)"/>  <!-- kinect, asus_xtion_pro --> 

  <arg name="world_name" value="$(find mbot_gazebo)/worlds/myroom.world"/>
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

<!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
	  <arg name="world_name" value="$(arg world_name)" />
      <arg name="debug" value="$(arg debug)" />
      <arg name="gui" value="$(arg gui)" />
      <arg name="paused" value="$(arg paused)"/>
      <arg name="use_sim_time" value="$(arg use_sim_time)"/>
      <arg name="headless" value="$(arg headless)"/>
  </include>

<!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->
     <!-- 加载机器人模型描述参数 -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find mbot_description)/urdf/xacro/gazebo/mbot_with_rplidar_gazebo.xacro'" /> 

<!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->
      <!-- 运行joint_state_publisher节点，发布机器人的关节状态  -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node> 

    <!-- 运行robot_state_publisher节点，发布tf  -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"  output="screen" >
        <param name="publish_frequency" type="double" value="50.0" />
    </node>
<!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->
     <!-- 在gazebo中加载机器人模型-->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model mrobot -param robot_description"/> 

  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>

<!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->
   <!-- Gmapping SLAM -->
   <include file="$(find mbot_navigation)/launch/hector.launch"/>
  <!-- 启动rviz -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find mbot_navigation)/rviz/gmapping.rviz"/>
</launch>
